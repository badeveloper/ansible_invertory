#!/usr/bin/python
import pyVmomi
from pyVim.connect import  SmartConnectNoSSL, Disconnect
import yaml
import json
from os.path import expanduser

def collect_properties(service_instance, view_ref, obj_type, path_set=None,
                       include_mors=False):
    collector = service_instance.content.propertyCollector
    # Create object specification to define the starting point of
    # inventory navigation
    obj_spec = pyVmomi.vmodl.query.PropertyCollector.ObjectSpec()
    obj_spec.obj = view_ref
    obj_spec.skip = True

    # Create a traversal specification to identify the path for collection
    traversal_spec = pyVmomi.vmodl.query.PropertyCollector.TraversalSpec()
    traversal_spec.name = 'traverseEntities'
    traversal_spec.path = 'view'
    traversal_spec.skip = False
    traversal_spec.type = view_ref.__class__
    obj_spec.selectSet = [traversal_spec]

    # Identify the properties to the retrieved
    property_spec = pyVmomi.vmodl.query.PropertyCollector.PropertySpec()
    property_spec.type = obj_type

    if not path_set:
        property_spec.all = True

    property_spec.pathSet = path_set

    # Add the object and property specification to the
    # property filter specification
    filter_spec = pyVmomi.vmodl.query.PropertyCollector.FilterSpec()
    filter_spec.objectSet = [obj_spec]
    filter_spec.propSet = [property_spec]
    # Retrieve properties
    props = collector.RetrieveContents([filter_spec])

    data = []
    for obj in props:
        properties = {}
        for prop in obj.propSet:
            properties[prop.name] = prop.val

        if include_mors:
            properties['obj'] = obj.obj

        data.append(properties)
    return data


def get_container_view(service_instance, obj_type, container=None):
    if not container:
        container = service_instance.content.rootFolder

    view_ref = service_instance.content.viewManager.CreateContainerView(
        container=container,
        type=obj_type,
        recursive=True
    )
    return view_ref

#Check MACADDRESS by vendor
def check_mac_addr(mac_addr, vmware_mac_addr ='00:50:56'):
    if len(mac_addr) == 17 and mac_addr[0:8] == vmware_mac_addr:
        return True
    else: return False
#Get IPADDR
def get_vm_ipaddr(guest_ipstack, guest_net):
    networks_list = ['0.0.0.0']
    if guest_ipstack and guest_net:
        ip_route = guest_ipstack[0].ipRouteConfig.ipRoute
        if ip_route:
         gateways = []
         for r in ip_route:
                 gate = r.gateway.ipAddress
                 net = r.network
                 dev_index = r.gateway.device
                 if net in networks_list:
                     try:
                      lan = guest_net[int(dev_index)].network
                     except IndexError: return None
                     for addr in guest_net:
                         if lan == addr.network and addr.ipAddress:
                             gateways.append(addr.ipAddress[0])
                             return gateways[0]
                 else:
                     for nic in guest_net:
                         if check_mac_addr(nic.macAddress) and nic.ipAddress:
                             return nic.ipAddress[0]
        else:
            return guest_ip
    else: return  None

def GetCred(cred_file):
    f = open(cred_file)
    hash = yaml.load(f)
    vcenters = hash["vcenters"]
    vcs = []
    for i in vcenters:
        vcs.append(vcenters[i])
    return vcs

HOME        = expanduser('~')
CRED_FILE   = HOME + '/inv.yaml'
BAD_OS_LIST =  ['winNetStandardGuest', 'winLonghorn','winLonghornGuest','winNetEnterprise',
                'windows8Server64Guest', 'winLonghorn64Guest', 'windows7Server64Guest', 'winNetEnterpriseGuest',
                'winNetEnterprise64Guest', 'windows9Server64Guest', 'win2000AdvServGuest', 'windows8_64Guest']

VM_PROPERTIES = ['name', 'guest', 'config.guestId']

all_vm = []

for vc in GetCred(CRED_FILE):
    host        =   vc['host']
    user        =   vc['user']
    password    =   vc['password']
    connect_to_vc = SmartConnectNoSSL(host=host, user=user, pwd=password)
    if not connect_to_vc:
        raise "Can not connect!!!"

    vm_data = get_container_view(connect_to_vc, obj_type=[pyVmomi.vim.VirtualMachine])

    vm_data_properties = collect_properties(connect_to_vc, view_ref=vm_data,
                                                    obj_type=pyVmomi.vim.VirtualMachine,
                                                    path_set=VM_PROPERTIES,
                                                    include_mors=True)
    for vm in vm_data_properties:
        os          =    vm['config.guestId']
        if os not in BAD_OS_LIST:
            guest       =    vm['guest']
            guest_ip    =    vm['guest'].ipAddress
            vm_name     =    vm['name']
            ip          =    get_vm_ipaddr(guest_ipstack=guest.ipStack, guest_net=guest.net)
            if ip:
                all_vm.append([vm_name.lower() ,ip])

hosts_vars = { }
for host_var in all_vm:
    hosts_vars.update({host_var[0]:  {'ansible_host': host_var[1], 'vm_name': host_var[0]}})

host_list = []
for vm in all_vm:
    host_list.append(vm[0])

print json.dumps({'_meta': {'hostvars': hosts_vars }, 'all': {'hosts': host_list}})


